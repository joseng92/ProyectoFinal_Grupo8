
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;

public class VentanaAsignaturas extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo;
    private ArrayList<Clase> clases; // Lista de asignaturas actual
    private BaseDeDatos baseDeDatos; // Acceso a los datos base

    public VentanaAsignaturas(BaseDeDatos baseDeDatos) {
        super("Gestión de Asignaturas", true, true, true, true);
        this.baseDeDatos = baseDeDatos;
        this.clases = baseDeDatos.getClases(); // Inicializamos con las asignaturas predefinidas
        initComponents(); // Inicializar componentes gráficos
        inicializarModelo(); // Vincular el modelo con tu tabla existente
        cargarDatosIniciales(); // Cargar asignaturas preexistentes en la tabla
    }

    private void inicializarModelo() {
        // Vincular el modelo con la tabla existente
        modelo = (DefaultTableModel) TablaAsignaturas.getModel();
    }

    private void cargarDatosIniciales() {
        // Limpia el modelo antes de cargar nuevos datos
        modelo.setRowCount(0);

        // Recorrer las asignaturas y agregarlas a la tabla
        for (Clase clase : clases) {
            modelo.addRow(new Object[]{
                clase.getCodigo(),
                clase.getNombre(),
                clase.getProfesor().getNombre(),
                clase.getEstudiantes().size() // Cantidad de estudiantes matriculados
            });
        }
    }

    private void registrarNuevaAsignatura(String codigo, String nombre, Profesor profesor) {
        // Verificar que no exista ya una asignatura con el mismo código
        for (Clase clase : clases) {
            if (clase.getCodigo().equalsIgnoreCase(codigo)) {
                JOptionPane.showMessageDialog(this, "Ya existe una asignatura con este código.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }

    private void registrarNuevaAsignatura() {
        try {
            // Solicitar el código de la asignatura
            String codigo = JOptionPane.showInputDialog(this, "Ingrese el código de la nueva asignatura:", "Código", JOptionPane.QUESTION_MESSAGE);
            if (codigo == null || codigo.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un código válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar que no exista ya una asignatura con el mismo código
            for (Clase clase : clases) {
                if (clase.getCodigo().equalsIgnoreCase(codigo)) {
                    JOptionPane.showMessageDialog(this, "Ya existe una asignatura con este código.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Solicitar el nombre de la asignatura
            String nombre = JOptionPane.showInputDialog(this, "Ingrese el nombre de la nueva asignatura:", "Nombre", JOptionPane.QUESTION_MESSAGE);
            if (nombre == null || nombre.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nombre válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Solicitar el profesor encargado de la asignatura
            Profesor profesor = (Profesor) JOptionPane.showInputDialog(this, "Seleccione el profesor encargado:", "Profesor",
                    JOptionPane.QUESTION_MESSAGE, null, baseDeDatos.getProfesores().toArray(), null);
            if (profesor == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un profesor válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear y agregar la nueva asignatura
            Clase nuevaClase = new Clase(codigo.trim(), nombre.trim(), profesor);
            clases.add(nuevaClase);

            // Actualizar la tabla
            modelo.addRow(new Object[]{
                nuevaClase.getCodigo(),
                nuevaClase.getNombre(),
                nuevaClase.getProfesor().getNombre(),
                nuevaClase.getEstudiantes().size() // Inicialmente sin estudiantes
            });

            JOptionPane.showMessageDialog(this, "Asignatura registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al registrar la asignatura.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAsignaturas = new javax.swing.JTable();
        btnRegistrarAsignatura = new javax.swing.JButton();

        setClosable(true);
        setTitle("Gestión Asignaturas");

        TablaAsignaturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Clase", "Profesor", "Estudiantes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaAsignaturas);
        if (TablaAsignaturas.getColumnModel().getColumnCount() > 0) {
            TablaAsignaturas.getColumnModel().getColumn(0).setResizable(false);
            TablaAsignaturas.getColumnModel().getColumn(1).setResizable(false);
            TablaAsignaturas.getColumnModel().getColumn(2).setResizable(false);
            TablaAsignaturas.getColumnModel().getColumn(3).setResizable(false);
        }

        btnRegistrarAsignatura.setText("Registrar Nueva Asignatura");
        btnRegistrarAsignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarAsignaturaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(btnRegistrarAsignatura)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegistrarAsignatura)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarAsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarAsignaturaActionPerformed
        registrarNuevaAsignatura(); // Llamar al método de registro
    }//GEN-LAST:event_btnRegistrarAsignaturaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaAsignaturas;
    private javax.swing.JButton btnRegistrarAsignatura;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
